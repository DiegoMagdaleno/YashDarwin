= リダイレクト
:encoding: UTF-8
:lang: ja
//:title: Yash マニュアル - リダイレクト
:description: Yash がサポートするリダイレクト機能の説明

dfn:[リダイレクト]はコマンドのファイル記述子を変更する機能です。リダイレクトを使用すると、コマンドの標準入力や標準出力を通常とは異なるファイルに繋ぎ換えた状態でコマンドを実行することができます。

リダイレクトはコマンド (link:syntax.html#simple[単純コマンド]または{zwsp}link:syntax.html#compound[複合コマンド]) にリダイレクト演算子を付することで行います。単純コマンドでは (他のトークンとくっつかない限り) どこでもリダイレクト演算子を置くことができます。複合コマンドではコマンドの最後にリダイレクト演算子を付けます。

リダイレクトはコマンドの実行が始まる前に処理されます。一つのコマンドに複数のリダイレクトがある場合は、リダイレクト演算子が書いてある順序で処理されます。オペランドなしの link:_exec.html[exec 組込みコマンド]を実行する場合を除き、リダイレクトは対象となっているコマンドに対してのみ働きます。すなわち、対象のコマンドの実行が終わるとリダイレクトによって変更されたファイル記述子は元の状態に戻ります。

リダイレクト演算子は、+&lt;+ または +&gt;+ で始まります。+&lt;+ で始まるリダイレクト演算子はデフォルトでは標準入力 (ファイル記述子 0) に作用します。+&gt;+ で始まるリダイレクト演算子はデフォルトでは標準出力 (ファイル記述子 1) に作用します。どちらの種類の演算子でも、演算子の直前に非負整数を指定することでデフォルト以外のファイル記述子に作用させることができます (このとき整数と演算子との間に一切空白などを入れてはいけません。また整数を{zwsp}link:syntax.html#quotes[クォート]してもいけません)。

[[file]]
== ファイルへのリダイレクト

最もよく使われるリダイレクトは、ファイルへのリダイレクトです。

入力のリダイレクト::
+&lt; {{トークン}}+

出力のリダイレクト::
+&gt; {{トークン}}+
+
+&gt;| {{トークン}}+
+
+&gt;&gt; {{トークン}}+

入出力のリダイレクト::
+&lt;&gt; {{トークン}}+

リダイレクトに含まれる{{トークン}}は{zwsp}link:expand.html[四種展開]されます。{zwsp}link:interact.html[対話シェル]ではさらに{zwsp}link:expand.html#glob[パス名展開]も行われます (パス名展開の結果が一つのファイルでなければエラーです)。{{トークン}}の展開結果がリダイレクト対象のファイル名として使われます。

入力のリダイレクトでは標準入力が対象ファイルからの読み込み専用ファイル記述子に置き換えられます。対象ファイルを開くことができなければエラーになります。

出力のリダイレクトでは標準出力が対象ファイルへの書き込み専用ファイル記述子に置き換えられます。対象ファイルが存在しなければ空の通常ファイルが作成されます。対象ファイルが既にある場合はそのファイルが開かれます。ただし演算子の種類によって以下のように挙動が異なります。

- 演算子 +&gt;|+ では、対象ファイルが存在しそれが通常のファイルの場合、ファイルを開く際にファイルの内容を空にします。
- 演算子 +&gt;+ は、{zwsp}link:_set.html#so-clobber[clobber オプション]が有効ならば演算子 +&gt;|+ と同じです。しかし clobber オプションが無効ならば、対象ファイルが存在しそれが通常のファイルの場合、エラーになります。
- 演算子 +&gt;&gt;+ では、ファイルを追記モードで開きます。ファイルへの書き込みは常にファイルの末尾へ追記する形で行われます。

入出力のリダイレクトでは標準入力が対象ファイルへの読み書き両用ファイル記述子に置き換えられます。対象ファイルが存在しなければ空の通常ファイルが作成されます。

[[socket]]
=== ソケットリダイレクト

ファイルのリダイレクトにおいて、対象ファイル名が +/dev/tcp/{{ホスト名}}/{{ポート}}+ または +/dev/udp/{{ホスト名}}/{{ポート}}+ の形式をしていて、そのファイルを開くことができない場合、ファイル名に含まれる{{ホスト名}}と{{ポート}}に対して通信を行うためのソケットが開かれます。

+/dev/tcp/{{ホスト名}}/{{ポート}}+ が対象の場合はストリーム通信ソケットを、++/dev/udp/{{ホスト名}}/{{ポート}}++ が対象の場合はデータグラム通信ソケットを開きます。典型的には、前者は TCP を、後者は UDP をプロトコルとして使用します。

ソケットリダイレクトはどのリダイレクト演算子を使っているかにかかわらず常に読み書き両用のファイル記述子を開きます。

ソケットリダイレクトは POSIX 規格にはない yash の独自拡張です。ただし、bash にも同様の機能があります。

[[dup]]
== ファイル記述子の複製

ファイル記述子の複製のリダイレクトでは、既存のファイル記述子をコピーしたり閉じたりできます。

ファイル記述子の複製::
+&lt;&amp; {{トークン}}+
+
+&gt;&amp; {{トークン}}+

{{トークン}}は<<file,ファイルのリダイレクト>>の場合と同様に展開されますが、これはファイル名ではなくファイル記述子として解釈されます。すなわち、{{トークン}}の展開結果はファイル記述子を表す非負整数となる必要があります。

演算子 +&lt;&amp;+ は{{トークン}}の展開結果で示されたファイル記述子を標準入力に複製します。演算子 +&gt;&amp;+ は{{トークン}}の展開結果で示されたファイル記述子を標準出力に複製します。演算子の直前に非負整数を指定することで、複製先のファイル記述子を変更できます。

{{トークン}}の展開結果が非負整数ではなくハイフン (+-+) となった場合は、ファイル記述子を複製する代わりに閉じます。演算子 +&lt;&amp;+ では標準入力が、演算子 +&gt;&amp;+ では標準出力がデフォルトで閉じられますが、演算子の直前に非負整数を指定することで、閉じるファイル記述子を変更できます。

link:posix.html[POSIX 準拠モード]では、++&lt;&amp;++ で複製するファイル記述子は読み込み可能でなければならず、++&gt;&amp;++ で複製するファイル記述子は書き込み可能でなければなりません。

[[here]]
== ヒアドキュメントとヒアストリング

dfn:[ヒアドキュメント]・dfn:[ヒアストリング]を使うとコマンドに直接テキストを渡すことができます。

ヒアドキュメント::
+&lt;&lt; {{トークン}}+
+
+&lt;&lt;- {{トークン}}+

ヒアストリング::
+&lt;&lt;&lt; {{トークン}}+

ヒアドキュメント・ヒアストリングでは、標準入力がヒアドキュメント・ヒアストリングの内容を読み込み可能なファイル記述子に置き換えられます。

ヒアドキュメント演算子 (+&lt;&lt;+ または +&lt;&lt;-+) がコマンド中に現れると、その演算子のある行の次の行からはヒアドキュメントの内容とみなされます。ヒアドキュメントの内容の部分は、シェルのコマンドとしては解釈されません。演算子の後にある{{トークン}}はヒアドキュメントの内容の終わりを表します。({{トークン}}では{zwsp}link:expand.html[展開]は行われませんが、{zwsp}link:syntax.html[クォート]は認識されます。) 演算子のある行より後の行で{{トークン}}だけからなる行が現れた時点でヒアドキュメントの内容は終わりだと判断されます。終わりを表す行はヒアドキュメントの内容には含まれません。演算子 +&lt;&lt;-+ を使っている場合は、ヒアドキュメントの内容の各行頭にあるタブはすべて削除されます。このとき{{トークン}}の前にタブがあっても (その行に他の余計な文字がなければ) ヒアドキュメントの内容の終わりとして認識します。

一行のコマンドに複数のリダイレクト演算子がある場合は、リダイレクトの内容は順番に処理されます。すなわち、その行の次の行からは最初のリダイレクトの内容として扱われ、その内容が終わったら、その次の行からは次のリダイレクトの内容として扱われます。最後のリダイレクトの内容が終わったら、その次の行からは再びコマンドとして解釈されます。

リダイレクトの内容は基本的に単なる文字列として扱われます。内容に含まれる空白やタブ、その他の記号はそのままコマンドに渡されます。ただし、{{トークン}}が全くクォートされていない場合は、ヒアドキュメントの内容は{zwsp}link:expand.html#params[パラメータ展開]・{zwsp}link:expand.html#cmdsub[コマンド置換]・{zwsp}link:expand.html#arith[数式展開]され、++$++, ++`++, ++"++, ++&#x5C;++ の直前にある場合および行の連結を行う場合にのみバックスラッシュを{zwsp}link:syntax.html#quotes[引用符]として扱えます。

ヒアストリングでは、演算子の後にある{{トークン}}は<<file,ファイルのリダイレクト>>の場合と同様に展開されます。この展開結果がヒアストリングの内容となります。ただしヒアストリングの内容の末尾には自動的に改行が付きます。

ヒアストリングは POSIX 規格にはない yash の独自拡張ですが、bash, ksh, zsh にも同様の機能があります。

[[pipe]]
== パイプリダイレクト

dfn:[パイプリダイレクト]を用いるとプロセス間通信に利用可能なパイプを開くことができます。

パイプリダイレクト::
+&gt;&gt;| {{トークン}}+

{{トークン}}は<<file,ファイルのリダイレクト>>の場合と同様に展開されますが、これはファイル名ではなくファイル記述子として解釈されます。すなわち、{{トークン}}の展開結果はファイル記述子を表す非負整数となる必要があります。

パイプリダイレクトはパイプを開きます。標準出力 (演算子 +&gt;&gt;|+ の直前に非負整数を指定している場合はその値のファイル記述子) がパイプに書きこむためのファイル記述子になります。また{{トークン}}の展開結果で示されたファイル記述子がパイプから読み込むためのファイル記述子になります。

パイプリダイレクトは POSIX 規格にはない yash の独自拡張です。

[[process]]
== プロセスリダイレクト

プロセスリダイレクトを用いると別のコマンドの入力または出力を受け渡せるパイプを開くことができます。

プロセスリダイレクト::
+&lt;({{サブコマンド}}…)+
+
+&gt;({{サブコマンド}}…)+

プロセスリダイレクトでは、{{サブコマンド}}が{zwsp}link:exec.html#subshell[サブシェル]で実行されます。このとき、+&lt;({{サブコマンド}}…)+ の形式のプロセスリダイレクトでは、{{サブコマンド}}の標準出力がこのコマンドの標準入力に渡るようパイプが開かれます。+&gt;({{サブコマンド}}…)+ の形式のプロセスリダイレクトでは、このコマンドの標準出力が{{サブコマンド}}の標準入力に渡るようパイプが開かれます。

プロセスリダイレクトは POSIX 規格にはない yash の独自拡張です。Bash と zsh にはプロセスリダイレクトと同様の構文を用いるプロセス置換という機能がありますが、プロセスリダイレクトとプロセス置換の挙動は異なっており、互換性はありません。

// vim: set filetype=asciidoc expandtab:
